<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="viewport" content="width=device-width, initial-scale=0.5" />
		<link rel="icon" href="/img/youtube-icon.ico" />
		<title>Download quality options</title>
		<link
			rel="stylesheet"
			href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css"
			integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l"
			crossorigin="anonymous"
		/>
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
			integrity="sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w=="
			crossorigin="anonymous"
		/>
		<script
			src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
			integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
			crossorigin="anonymous"
		></script>
		<script
			src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
			integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
			crossorigin="anonymous"
		></script>
		<script
			src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
			integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
			crossorigin="anonymous"
		></script>
		<style>
			/* The Modal (background) */
			.modal {
				display: none; /* Hidden by default */
				position: fixed; /* Stay in place */
				z-index: 1; /* Sit on top */
				padding-top: 100px; /* Location of the box */
				left: 0;
				top: 0;
				width: 100%; /* Full width */
				height: 100%; /* Full height */
				overflow: auto; /* Enable scroll if needed */
				background-color: rgb(0, 0, 0); /* Fallback color */
				background-color: rgba(0, 0, 0, 0.7); /* Black w/ opacity */
			}

			/* Modal Content */
			.modal-content {
				background-color: #fefefe;
				margin: auto;
				padding: 20px;
				border: 1px solid #888;
				min-width: 500px;
				max-width: fit-content;
			}
		</style>
		<script>
			// Wait for content to load
			document.addEventListener('DOMContentLoaded', function (event) {
				// JS script
				document.getElementById('videoqualitydownload').addEventListener('click', async (event) => {
					window.onbeforeunload = function () {
						return 'Download is in progress, are you sure you want to leave?';
					};
					event.preventDefault();
					const selecturl = window.location.href;
					const baseurl = window.location.origin;
					const videoItag = document.getElementById('video-quality') ? document.getElementById('video-quality').value : null;
					function wait(ms) {
						return new Promise((resolve) => setTimeout(resolve, ms));
					}

					if (videoItag == 'thumbnail') {
						var newTab = window.open(videoDetails.thumbnails[videoDetails.thumbnails.length - 1].url, '_blank');

						// Ensure the new tab is in the foreground
						newTab.focus();
						return;
					} else {
						// Hide the download button when downloading
						if (document.getElementById('video-quality')) document.getElementById('video-quality').style.display = 'none';
						document.getElementById('videoqualitydownload').style.display = 'none';

						const uid = Date.now().toString(36) + Math.random().toString(36).substr(2);

						// Get download data
						fetch(`${selecturl}&videoItag=${videoItag}&dl=true&uid=${uid}`, {
							method: 'GET'
						});

						let data2;
						// Open the progress bar modal
						document.getElementById('myModal').style.display = 'block';

						// Loop progressbar until download complete
						let progressloop = true;
						while (progressloop) {
							const response2 = await fetch(`${baseurl}/download/progress?uid=${uid}`, {
								method: 'GET'
							});
							data2 = await response2.json();

							if (data2.progress.startsWith('Done')) {
								progressloop = false;
								document.getElementById('download-progress-bar').innerText = 'Download Complete!';
							} else {
								document.getElementById('download-progress-bar').innerText = data2.progress;
							}
							wait(100);
						}

						window.onbeforeunload = null;

						// Download file and redirect back to home page
						var newWin = window.open(`${baseurl}/download/download?file=${data2.progress.slice(5)}`);

						if (!newWin || newWin.closed || typeof newWin.closed == 'undefined') {
							//POPUP BLOCKED
							alert('Please allow popups for this website to download the file. Refresh the page after allowing popups.');
						}

						// Show back button and hide modal
						if (document.getElementById('video-quality')) document.getElementById('video-quality').style.display = 'block';
						document.getElementById('videoqualitydownload').style.display = 'block';
						document.getElementById('myModal').style.display = 'none';
					}
				});

				let title = decodeURIComponent('<%= title %>');

				function decodeHtml(html) {
					var txt = document.createElement('textarea');
					txt.innerHTML = html;
					return txt.value;
				}

				document.title = `${decodeHtml(title)} - Download`;

				// add channel name
				let videoDetails = JSON.parse(decodeURIComponent(`<%- videoDetails %>`));
				let author = JSON.parse(decodeURIComponent(`<%- author %>`));
				document.getElementById('channel').innerHTML = `
                    <table>
                        <td>
                            <a href="${author.user_url}" style="text-decoration: none; color: white">
                                <img src='${author.thumbnails[0].url}' alt='${author.name}' style="border-radius: 50%; height: 40px; margin-right: 3px">
                            </a>
                        </td>
                        <td style="vertical-align: middle; padding-left: 0px;">
                            <a href="${author.user_url}" style="text-decoration: none; color: white">
                                <div style="margin: 0px;display:flex">
                                    <div style="overflow: hidden;max-width: 300px;text-overflow: ellipsis;font-size: 1.1rem">${author.name}</div><% if (verified) { %><div style="width: 18px; height: 18px; fill: currentcolor; align-self: center; padding-left:3px;"><svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24" focusable="false" style="pointer-events: none; display: block; width: 100%; height: 100%;"><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zM9.8 17.3l-4.2-4.1L7 11.8l2.8 2.7L17 7.4l1.4 1.4-8.6 8.5z"></path></svg></div><% } %>
                                </div>
                            </a>
                            <div style="margin: 0px; font-size: 0.8rem"><%= subscribers %> subscribers</div>
                        </td>
                    </table>
                    `;

				function timeAgo(dateParam) {
					const date = typeof dateParam === 'object' ? dateParam : new Date(dateParam);
					const now = new Date();
					const secondsPast = (now.getTime() - date.getTime()) / 1000;

					if (secondsPast < 60) {
						return parseInt(secondsPast) + ' seconds ago';
					}
					if (secondsPast < 3600) {
						return parseInt(secondsPast / 60) + ' minutes ago';
					}
					if (secondsPast <= 86400) {
						return parseInt(secondsPast / 3600) + ' hours ago';
					}
					if (secondsPast <= 2592000) {
						// up to 30 days
						return parseInt(secondsPast / 86400) + ' days ago';
					}
					if (secondsPast <= 31536000) {
						// up to 365 days
						return parseInt(secondsPast / 2592000) + ' months ago';
					}
					if (secondsPast > 31536000) {
						return parseInt(secondsPast / 31536000) + ' years ago';
					}
				}

				function formatDate(date) {
					const options = { day: '2-digit', month: 'short', year: 'numeric' };
					return date.toLocaleDateString('en-GB', options);
				}

				function formatNumber(num) {
					return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
				}

				function linkify(elementId) {
					var element = document.getElementById(elementId);
					if (element) {
						var text = element.innerHTML;
						var urlRegex = /(https?:\/\/[^\s]+)/g;
						element.innerHTML = text.replace(urlRegex, function (url) {
							return '<a href="' + url + '" target="_blank">' + url + '</a>';
						});
					}
				}

				// add video stats to description box
				document.getElementById('video_stats').innerHTML = `<p style="font-size: 0.9rem">${formatNumber(videoDetails.viewCount)} views • ${timeAgo(
					videoDetails.uploadDate
				)}</p>`;

				// add collapsable description box
				if (videoDetails.description == null) {
					document.getElementById('description').textContent = `No description has been added to this video.`;
					document.getElementById('description').style.fontStyle = 'italic';
				} else {
					document.getElementById('description').textContent = `${videoDetails.description}`;
					document.getElementById('description').style.fontStyle = 'normal';
				}

				linkify('description');

				var content = document.getElementById('description');
				var button = document.getElementById('toggleButton');

				// Check if the text overflows
				if (content.scrollHeight > content.clientHeight) {
					// If the text overflows, show the button
					button.style.display = 'block';
				}

				button.addEventListener('click', function () {
					if (content.classList.contains('content-collapsed')) {
						content.classList.remove('content-collapsed');
						content.classList.add('content-expanded');
						document.getElementById('video_stats').innerHTML = `<p style="font-size: 0.9rem">${formatNumber(
							videoDetails.viewCount
						)} views • ${formatDate(new Date(videoDetails.uploadDate))}</p>`;
						button.textContent = 'Show Less';
					} else {
						content.classList.remove('content-expanded');
						content.classList.add('content-collapsed');
						document.getElementById('video_stats').innerHTML = `<p style="font-size: 0.9rem">${formatNumber(
							videoDetails.viewCount
						)} views • ${timeAgo(videoDetails.uploadDate)}</p>`;
						button.textContent = 'Show More';
					}
				});

				// Append download thumbnail option
				var select = document.getElementById('video-quality');
				var option = document.createElement('option');

				// Set the value and text of the option
				option.value = 'thumbnail';
				option.text = 'Thumbnail download';

				// Append the option to the select
				select.appendChild(option);
			});
		</script>
	</head>
	<body>
		<%- include("partials/header") %>
		<div class="container my-5" style="padding-bottom: 30px">
			<div class="container" style="padding-top: 56.25%; position: relative; width: 100%; border: 0px">
				<iframe class="d-flex" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%" src="<%= url %>"> </iframe>
			</div>
			<!-- title -->
			<h3 style="padding: 20px 0 5px 0"><%= title%></h3>

			<!-- div for channel and download -->
			<div style="display: flex" class="channel_download_container">
				<!-- channel -->
				<div id="channel" class="float_left"></div>

				<!-- download form -->
				<div class="container float_right">
					<% if (video == 'on') { %>
					<div class="selectdiv">
						<table id="center">
							<tr>
								<td>
									<select id="video-quality">
										<%for (i in videoFormats) { let videos = videoFormats[i];%>
										<option value="<%=video.itag%>">
											bitrate: <%=videos.bitrate%>bps | <%=videos.container%>(<%=videos.videoCodec.split('.')[0]%>) |
											<%=videos.qualityLabel%>
										</option>
										<%}%>
									</select>
								</td>

								<td style="padding: 0px">
									<button class="search-download-button" id="videoqualitydownload" style="float: right !important">Download</button>
								</td>
							</tr>
							<tr></tr>
						</table>
					</div>
					<% } else {%>
					<br />
					<button class="search-download-button" id="videoqualitydownload" style="float: right !important">Download</button>
					<% } %>
					<!-- The Modal -->
					<div id="myModal" class="modal">
						<!-- Modal content -->
						<div class="modal-content">
							<div class="modal-header">
								<h4>Downloading...</h4>
							</div>
							<hr />
							<div class="modal-body" id="download-progress-bar"></div>
						</div>
					</div>
					<link rel="stylesheet" type="text/css" href="/css/dropdown.css" />
				</div>
			</div>

			<!-- description box -->
			<hr style="width: 100%; text-align: left; margin: 0 0 10px 0; background-color: rgba(77, 77, 77, 0.411)" />
			<div style="padding: 15px; border-radius: 10px; background-color: rgba(77, 77, 77, 0.411)">
				<div id="video_stats"></div>
				<div class="content-collapsed" id="description" style="white-space: pre-wrap"></div>
				<button id="toggleButton">Show More</button>
			</div>
		</div>
		<link rel="stylesheet" href="/css/styles.css" />
		<style>
			#description {
				line-height: fit-content;
				overflow: hidden;
				text-overflow: ellipsis;
				padding-bottom: 20px;
			}

			.content-expanded {
				max-height: none; /* Show all lines */
				padding-bottom: 20px;
			}

			.content-collapsed {
				max-height: 4.5em; /* Show 3 lines */
			}

			#toggleButton {
				background: none;
				color: white;
				border: none;
				padding: 15px 0 0 0;
				font: inherit;
				cursor: pointer;
				font-weight: bold;
				text-decoration: none;
			}

			/* CSS for the parent div */
			.channel_download_container {
				width: 100%;
				/* overflow: auto;  */
				display: flex;
				flex-wrap: wrap;
			}
			/* 
			.float_left {
				min-width: 300px;
			} */
			.float_right {
				display: flex;
				justify-content: flex-end;
				/* width: 100% !important; */
				flex: 1 0 60%;
				padding: 0;
			}

			.float_left {
				flex: 1 0 40%;
				padding: 0;
			}

			/* CSS for screen sizes where the right div should move below the left div */
			@media (max-width: 767px) {
				.float_left,
				.float_right {
					flex: 1 0 100%;
				}
			}
		</style>
	</body>
</html>
